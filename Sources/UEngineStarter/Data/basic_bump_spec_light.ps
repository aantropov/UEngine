#version 330 core

uniform struct PointLight
{
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 attenuation;
	vec3 spotDirection;
	float spotExponent;
	float spotCosCutoff;

} light;

uniform sampler2DShadow depthTexture;

uniform struct Material
{
	sampler2D texture;
	sampler2D normal;
	sampler2D specular_tex;

	vec4  ambient;
	vec4  diffuse;
	vec4  specular;
	vec4  emission;
	float shininess;

} material;

in Vertex {	
	vec2  texcoord;
	vec3  normal;
	vec3  lightDir;
	vec3  lightDirTBN;
	vec3  viewDir;
	float distance;
	vec4 smcoord;
} Vert;

out vec4 color;

float PCF(in vec4 smcoord)
{
	float res = 0.0;

	res += textureProjOffset(depthTexture, smcoord, ivec2(-1,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2(-1, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2(-1, 1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0, 1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1, 1));

	return (res / 9.0);
}

void main(void)
{
	float distSqr = dot(Vert.lightDir, Vert.lightDir);	
	vec3 lVec = Vert.lightDir * inversesqrt(distSqr);
	vec3 bump = normalize( texture(material.normal, Vert.texcoord).xyz * 2.0 - 1.0);
	
	vec4 spec = vec4(texture(material.specular_tex, Vert.texcoord));

	//float shadow = textureProj(depthTexture, Vert.smcoord);
	float shadow  = clamp(PCF(Vert.smcoord), 0.3, 1.0);
	
	//vec3 normal   = normalize(Vert.normal);
	vec3 lightDir = normalize(Vert.lightDirTBN);
	vec3 viewDir  = normalize(Vert.viewDir);
	vec3 lightDirLight = normalize(Vert.lightDir);

	float spotEffect = dot(normalize(light.spotDirection), -lightDirLight);
	float spot       = float(spotEffect > light.spotCosCutoff);
	spotEffect = max(pow(spotEffect, light.spotExponent), 0.0);

	float attenuation = spot * spotEffect / (light.attenuation[0] +
		light.attenuation[1] * Vert.distance +
		light.attenuation[2] * Vert.distance * Vert.distance);
		
	color = material.emission;
		
	color += material.ambient * light.ambient * attenuation;
	
	float NdotL = max(dot(lVec, bump ),0);
	color += material.diffuse * light.diffuse * NdotL * attenuation;

	float RdotVpow = max(pow(dot(reflect(-normalize(lVec), normalize(bump)), normalize(viewDir)), material.shininess), 0.0);
	color += material.specular * spec * light.specular * RdotVpow * attenuation;
	
	color *= texture(material.texture, Vert.texcoord) * shadow;
	
}
