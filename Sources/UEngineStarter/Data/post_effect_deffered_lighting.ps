#version 330 core
#define maxLight 8

uniform float lightsNum;

uniform sampler2D colorScene;
uniform sampler2D depthScene;
uniform sampler2D normalScene;
uniform sampler2D diffuseScene;
uniform sampler2D ambientScene;
uniform sampler2D specularScene;
uniform sampler2D positionScene;

uniform struct Transform
{
	mat4 model;
} transform;

uniform vec4 light_position[maxLight];
uniform vec4 light_ambient[maxLight];
uniform vec4 light_diffuse[maxLight];
uniform vec4 light_specular[maxLight];
uniform vec3 light_attenuation[maxLight];
uniform mat4 light_transform[maxLight];

in Vertex
{
  vec2 texcoord;
} Vert;

out vec4 color;

vec4 ProccessLight(int i, vec3 bump, vec4 vertPosition, vec4 ambient, vec4 diffuse, vec4 specular)
{
	vec4 res = vec4(0);

	vec3 viewDir = -vertPosition.xyz;
	vec3 lightDir = light_position[i].xyz- vertPosition.xyz;

	float distSqr = dot(lightDir, lightDir);
	vec3 lVec = lightDir * inversesqrt(distSqr);
	float distance = length(lightDir);
		
	vec3 lightDirLight = normalize(lightDir);

	float attenuation = 1.0 / (light_attenuation[i].x +
		light_attenuation[i].y * distance +
		light_attenuation[i].z * distance * distance);
		
	res = ambient * light_ambient[i] * attenuation;
	
	float NdotL = max(dot(lightDirLight, normalize(bump) ),0);
	res += diffuse * light_diffuse[i] * NdotL * attenuation;

	float RdotVpow = max(pow(dot(reflect(normalize(lightDirLight), normalize(bump)), -normalize(viewDir)), specular[3]), 0.0);
	res += vec4(specular.xyz, 1.0) * light_specular[i] * RdotVpow * attenuation;
	
	return res;
	//return vec4(bump,1.0);
}

void main(void)
{
  vec4 vertPosition  = texture(positionScene, Vert.texcoord);
  vec3 vertNormal  = (texture(normalScene, Vert.texcoord).xyz*2.0 - vec3(1.0));
  vec4 ambient = texture(ambientScene, Vert.texcoord);
  vec4 diffuse = texture(diffuseScene, Vert.texcoord);
  vec4 specular = texture(specularScene, Vert.texcoord);
  vec3 texture  = texture(colorScene, Vert.texcoord).xyz;

  vec4 res = vec4(0.0);

  for(int i = 0; i < int(lightsNum); i++)
  {
		res += ProccessLight(i, vertNormal, vertPosition, ambient, diffuse, specular);
  }

  color = vec4(texture, 1.0f) * (res);
}

