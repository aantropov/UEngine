#version 330 core

uniform struct Material
{
	sampler2D texture;
	sampler2D noiseMap;

	vec4  ambient;
	vec4  diffuse;
	vec4  specular;
	vec4  emission;
	float shininess;

} material;

uniform struct Transform
{
	mat4 model;
	mat4 viewProjection;
	mat3 normal;
	vec3 viewPosition;
        mat4 modelViewProjection;
} transform;

in Vertex 
{
	vec4  position;
	vec2  texcoord;
}Vert;

out vec4 color[6];

in	vec3 	pos;
in	vec3 	v;
in	vec3 	l;
in	vec3 	colorYxy;

uniform float     time;

vec3	convertColor ()
{
    vec3  clrYxy = vec3 ( colorYxy );
                                            // now rescale Y component
    clrYxy [0] = 1.0 - exp ( -clrYxy [0] / 25.0 );

    float ratio = clrYxy [0] / clrYxy [2];  // Y / y = X + Y + Z
    vec3  XYZ;

    XYZ.x = clrYxy [1] * ratio;             // X = x * ratio
    XYZ.y = clrYxy [0];                     // Y = Y
    XYZ.z = ratio - XYZ.x - XYZ.y;          // Z = ratio - X - Y

    const vec3 rCoeffs = vec3 ( 3.240479, -1.53715, -0.49853  );
    const vec3 gCoeffs = vec3 ( -0.969256, 1.875991, 0.041556 );
    const vec3 bCoeffs = vec3 ( 0.055684, -0.204043, 1.057311 );

    return vec3 ( dot ( rCoeffs, XYZ ), dot ( gCoeffs, XYZ ), dot ( bCoeffs, XYZ ) );
}

void main ()
{
    vec4  skyColor = vec4 ( clamp ( convertColor (), 0.0, 1.0 ), 1.0 );
    
	color[0] = skyColor + texture(material.texture, Vert.texcoord * 1.5);
	color[1] = vec4(0.0);
	color[2] = vec4(0.0);
	color[3] = vec4(0.0, 0.0, 0.0, 1.0);
	color[4] = vec4(0.0);
	color[5] = vec4(0.0);
	//color[6] = skyColor + texture(material.texture, Vert.texcoord * 1.5);
}