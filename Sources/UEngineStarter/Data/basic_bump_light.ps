#version 330 core

#define maxLight 8
uniform int lightsNum;

uniform vec4 light_position[maxLight];
uniform vec4 light_ambient[maxLight];
uniform vec4 light_diffuse[maxLight];
uniform vec4 light_specular[maxLight];
uniform vec3 light_attenuation[maxLight];
uniform vec3 light_spotDirection[maxLight];
uniform float light_spotExponent[maxLight];
uniform float light_spotCosCutoff[maxLight];
uniform mat4 light_transform[maxLight];
uniform sampler2DShadow light_depthTexture[maxLight];

uniform struct Material
{
	sampler2D texture;
	sampler2D normal;

	vec4  ambient;
	vec4  diffuse;
	vec4  specular;
	vec4  emission;
	float shininess;

} material;

in Vertex {	
	vec2  texcoord;
	vec3  normal;
	vec3  lightDir[maxLight];
	vec3  lightDirTBN[maxLight];
	vec3  viewDir;
	vec4 smcoord[maxLight];
} Vert;

out vec4 color;

float PCF(in vec4 smcoord, sampler2DShadow depthTexture)
{
	float res = 0.0;

	res += textureProjOffset(depthTexture, smcoord, ivec2(-1,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1,-1));
	res += textureProjOffset(depthTexture, smcoord, ivec2(-1, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1, 0));
	res += textureProjOffset(depthTexture, smcoord, ivec2(-1, 1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 0, 1));
	res += textureProjOffset(depthTexture, smcoord, ivec2( 1, 1));

	return (res / 9.0);
}

uniform struct Transform
{
	mat4 model;
	mat4 viewProjection;	
	mat3 normal;
	vec3 viewPosition;
} transform;

vec4 ProccessLight(int i, vec3 bump, vec3 viewDir)
{
	vec4 res = vec4(0);

	float distSqr = dot(Vert.lightDir[i], Vert.lightDir[i]);
	vec3 lVec = Vert.lightDirTBN[i] * inversesqrt(distSqr);
	float distance = length(Vert.lightDir[i]);

	float shadow  = clamp(PCF(Vert.smcoord[i], light_depthTexture[i]), 0.1, 1.0);
	
	vec3 lightDir = normalize(Vert.lightDirTBN[i]);
	vec3 lightDirLight = normalize(Vert.lightDir[i]);

	float spotEffect = dot(normalize(light_spotDirection[i]), -lightDirLight);
	float spot       = float(spotEffect > light_spotCosCutoff[i]);
	spotEffect = max(pow(spotEffect, light_spotExponent[i]), 0.0);

	float attenuation = spot*spotEffect / (light_attenuation[i].x +
		light_attenuation[i].y * distance +
		light_attenuation[i].z * distance * distance);
		
	res = material.ambient * light_ambient[i] * attenuation;
	
	float NdotL = max(dot(normalize(lVec), bump ),0);
	res += material.diffuse * light_diffuse[i] * NdotL * attenuation;

	float RdotVpow = max(pow(dot(reflect(normalize(lVec), normalize(bump)), -normalize(viewDir)), material.shininess), 0.0);
	
	res += material.specular * light_specular[i] * RdotVpow * attenuation;
	
	res *= shadow;
	return res;
}

void main(void)
{
	vec3 bump = normalize( texture(material.normal, Vert.texcoord).xyz * 2.0 - 1.0);
	vec3 viewDir  = normalize(Vert.viewDir);
	
	vec4 lightRes[maxLight];
	
	vec4 res = vec4(0.0);

	for(int i = 0; i < int(lightsNum); i++)
	{
		res += ProccessLight(i, bump, viewDir);
	}

	color = material.emission;	
	color = texture(material.texture, Vert.texcoord) * res;//(lightRes[0] + lightRes[1] + lightRes[2]);
	
}
